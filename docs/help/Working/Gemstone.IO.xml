<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.IO</name>
  </assembly>
  <members>
    <member name="T:Gemstone.IO.CachedFileStream">
      <summary>
            Represents a file stream that caches recently used blocks in memory.
            </summary>
      <remarks>
        <para>
            This class was developed as a wrapper around <see cref="T:System.IO.FileStream" /> with the same
            basic functionality. This stream treats the file as a collection of contiguous blocks which can
            be loaded into an in-memory lookup table to greatly improve seek times. This class generally
            performs significantly better than the standard FileStream class when maintaining multiple
            file pointers and frequently seeking back and forth between them. For an example of a good
            use-case, consider copying a list of serialized objects from one location in the file to another
            without loading the whole list into memory.
            </para>
        <para>
            This class likely will not perform significantly better or worse than the standard FileStream
            when performing strictly sequential reads or writes. For an example of a bad use-case, consider
            reading a list of objects into memory or simply appending new data to the end of the file. In
            both of these cases, it may be better to use the standard FileStream for less memory overhead
            and more predictable flush behavior.
            </para>
        <para>
            Blocks are loaded into memory as they are used (for read/write operations) and will be kept in
            memory for as long as possible. Blocks can only be flushed from the cache by decreasing the
            cache size or by accessing a non-cached block when the cache is already full. In these cases,
            a least recently used algorithm is executed to determine which blocks should be removed from
            the cache either to decrease the size of the cache or to make room for a new block.
            </para>
        <para>
            Write operations are also cached such that they will not be committed to the file until the
            block is removed from the cache or a call to <see cref="M:Gemstone.IO.CachedFileStream.Flush" /> has been made. This can
            have some additional implications as compared to the standard FileStream. For instance,
            write operations may not be committed to the file in the order in which they were executed.
            Users of this class will need to be judicious about when and how often they call Flush.
            </para>
      </remarks>
    </member>
    <member name="F:Gemstone.IO.CachedFileStream.DefaultBlockSize">
      <summary>
            Default value for the <see cref="P:Gemstone.IO.CachedFileStream.BlockSize" /> property.
            </summary>
    </member>
    <member name="F:Gemstone.IO.CachedFileStream.DefaultCacheSize">
      <summary>
            Default value for the <see cref="P:Gemstone.IO.CachedFileStream.CacheSize" /> property.
            </summary>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> or <paramref name="access" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="blockSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the block size. For <paramref name="blockSize" /> values between one and eight, the actual block size is set to eight bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="blockSize" /> is negative or zero.-or- <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="blockSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the block size. For <paramref name="blockSize" /> values between one and eight, the actual block size is set to eight bytes.</param>
      <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync" /> parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="blockSize" /> is negative or zero.-or- <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="blockSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the block size. For <paramref name="blockSize" /> values between one and eight, the actual block size is set to eight bytes.</param>
      <param name="options">A value that specifies additional file options.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="blockSize" /> is negative or zero.-or- <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying FileMode.CreateNew when the file specified by <paramref name="path" /> already exists, occurred.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. -or-<see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.BlockSize">
      <summary>
            Gets the size of the cached blocks.
            </summary>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.CacheSize">
      <summary>
            Gets or sets the maximum size of the cache.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Cache size is set to a value less than zero.</exception>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.CanRead">
      <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
      <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.CanWrite">
      <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
      <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.CanSeek">
      <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
      <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.Position">
      <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
      <returns>
            The current position within the stream.
            </returns>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Gemstone.IO.CachedFileStream.Length">
      <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
      <returns>
            A long value representing the length of the stream in bytes.
            </returns>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
      <returns>
            The new position within the current stream.
            </returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Flush">
      <summary>
            Clears buffers for this stream and causes any buffered data to be written to the file.
            </summary>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Flush(System.Boolean)">
      <summary>
            Clears buffers for this stream and causes any buffered data to be written to the file,
            and also clears all intermediate file buffers.
            </summary>
      <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.SetLength(System.Int64)">
      <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Gemstone.IO.CachedFileStream.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:Gemstone.IO.Checksums.Adler32">
      <summary>
            Generates an Adler-32 checksum calculation.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Adler32.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Checksums.Adler32" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Adler32.Value">
      <summary>
            Returns the Adler-32 data checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Adler32.Reset">
      <summary>
            Resets the Adler-32 data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Adler32.Update(System.Byte)">
      <summary>
            Updates the checksum with the byte value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Adler32.Update(System.Byte[])">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">buffer an array of bytes</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds the byte array to the data checksum.
            </summary>
      <param name="buffer">The buffer which contains the data</param>
      <param name="offset">The offset in the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the checksum with.</param>
    </member>
    <member name="T:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions">
      <summary>Defines extension functions related to computing checksums.</summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Adler32Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the Adler-32 checksum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform checksum on.</param>
      <param name="startIndex">Starts index in data buffer to begin checksum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform checksum over.</param>
      <returns>Computed Adler-32 checksum over the specified portion of the buffer.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Crc16Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the CRC16 check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
      <returns>Computed CRC16 checksum over the specified portion of the buffer.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.CrcCCITTChecksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the CRC-CCITT check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
      <returns>Computed CRC-CCITT checksum over the specified portion of the buffer.</returns>
      <remarks>
            The CRC-CCITT is a table based 16-bit CRC popular for modem protocols defined for use by the
            Consultative Committee on International Telegraphy and Telephony (CCITT) 
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.ModBusCrcChecksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the CRC-ModBus check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
      <returns>Computed CRC-ModBus checksum over the specified portion of the buffer.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Crc32Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the CRC32 check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
      <returns>Computed CRC32 checksum over the specified portion of the buffer.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Xor8Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates byte length (8-bit) XOR-based check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform XOR check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
      <returns>Byte length XOR check-sum.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Xor16Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates word length (16-bit) XOR-based check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform XOR check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum overs</param>
      <returns>Word length XOR check-sum.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Xor32Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates double-word length (32-bit) XOR-based check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform XOR check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
      <returns>Double-word length XOR check-sum.</returns>
    </member>
    <member name="M:Gemstone.IO.Checksums.ChecksumExtensions.ChecksumExtensions.Xor64Checksum(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates quad-word length (64-bit) XOR-based check-sum on specified portion of a buffer.</summary>
      <param name="data">Data buffer to perform XOR check-sum on.</param>
      <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
      <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
      <returns>Quad-word length XOR check-sum.</returns>
    </member>
    <member name="T:Gemstone.IO.Checksums.ChecksumType">
      <summary>
            Indicates type of CRC-16 calculation performed.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Checksums.ChecksumType.Crc16">
      <summary>
            Regular CRC-16 calculation.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Checksums.ChecksumType.ModBus">
      <summary>
            ModBus CRC-16 calculation.
            </summary>
    </member>
    <member name="T:Gemstone.IO.Checksums.Crc16">
      <summary>
            Generates a byte-wise 16-bit CRC calculation.
            </summary>
      <remarks>
        <para>2-byte (16-bit) CRC: The generating polynomial is</para>
        <para>        16   15   2    1</para>
        <para>G(X) = X  + X  + X  + X</para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.#ctor">
      <summary>
            Creates a new instance of the Crc16 class.
            The checksum starts off with a value of 0x0000.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.#ctor(Gemstone.IO.Checksums.ChecksumType)">
      <summary>
            Creates a new instance of the Crc16 class.
            </summary>
      <param name="checksumType">
            Type of calculation to perform, CRC-16 or ModBus.
            </param>
    </member>
    <member name="P:Gemstone.IO.Checksums.Crc16.Value">
      <summary>
            Returns the CRC-16 data checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.Reset">
      <summary>
            Resets the CRC-16 data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.Reset(Gemstone.IO.Checksums.ChecksumType)">
      <summary>
            Resets the CRC-16 data checksum as if no update was ever called.
            </summary>
      <param name="checksumType">Type of CRC calculation. CRC-16 resets to 0x0000, ModBus resets to 0xFFFF</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.Update(System.Byte)">
      <summary>
            Updates the checksum with the byte value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.Update(System.Byte[])">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">buffer an array of bytes</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc16.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds the byte array to the data checksum.
            </summary>
      <param name="buffer">The buffer which contains the data</param>
      <param name="offset">The offset in the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="T:Gemstone.IO.Checksums.Crc32">
      <summary>
            Generates a byte-wise 32-bit CRC calculation.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Crc32.Value">
      <summary>
            Returns the CRC-32 data checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc32.Reset">
      <summary>
            Resets the CRC-32 data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc32.Update(System.Int32)">
      <summary>
            Updates the checksum with the integer value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc32.Update(System.Byte[])">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">buffer an array of bytes</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds the byte array to the data checksum.
            </summary>
      <param name="buffer">The buffer which contains the data</param>
      <param name="offset">The offset in the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Crc32.Compute(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the CRC32 check-sum on specified portion of a buffer.</summary>
      <param name="buffer">Data buffer to perform check-sum on.</param>
      <param name="offset">Starts index in data buffer to begin check-sum.</param>
      <param name="count">Total number of bytes from <paramref name="offset">offset</paramref> to
            perform check-sum over.</param>
      <returns>Computed CRC32 checksum over the specified portion of the buffer.</returns>
    </member>
    <member name="T:Gemstone.IO.Checksums.CrcCCITT">
      <summary>Generates a 16-bit CRC-CCITT checksum.</summary>
      <remarks>
            This is a table based 16-bit CRC popular for modem protocols defined for use by the
            Consultative Committee on International Telegraphy and Telephony (CCITT) 
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Checksums.CrcCCITT.#ctor">
      <summary>
            Creates a new instance of the CrcCCITT class.
            The checksum starts off with a value of 0xFFFF.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.CrcCCITT.Value">
      <summary>
            Returns the CRCCCITT data checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.CrcCCITT.Reset">
      <summary>
            Resets the CRC-CCITT data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.CrcCCITT.Update(System.Byte)">
      <summary>
            Updates the checksum with the int bval.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.CrcCCITT.Update(System.Byte[])">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">buffer an array of bytes</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.CrcCCITT.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds the byte array to the data checksum.
            </summary>
      <param name="buffer">The buffer which contains the data</param>
      <param name="offset">The offset in the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="N:Gemstone.IO.Checksums">
      <summary>
            Contains classes and extension functions used to calculate standard checksums and CRC’s.
            </summary>
    </member>
    <member name="T:Gemstone.IO.Checksums.Xor16">
      <summary>Calculates word length (16-bit) XOR-based check-sum on specified portion of a buffer.</summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor16.#ctor">
      <summary>
            Creates a new instance of the Xor16Bit class.
            The checksum starts off with a value of 0.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Xor16.Value">
      <summary>
            Returns the Xor 16-bit checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor16.Reset">
      <summary>
            Resets the checksum to the initial value.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor16.Update(System.UInt16)">
      <summary>
            Updates the checksum with a ushort value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor16.Update(System.Byte[])">
      <summary>
            Updates the checksum with an array of bytes.
            </summary>
      <param name="buffer">
            The source of the data to update with.
            </param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor16.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">
            an array of bytes
            </param>
      <param name="offset">
            the start of the data used for this update
            </param>
      <param name="count">
            the number of bytes to use for this update
            </param>
    </member>
    <member name="T:Gemstone.IO.Checksums.Xor32">
      <summary>Calculates double-word length (32-bit) XOR-based check-sum on specified portion of a buffer.</summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor32.#ctor">
      <summary>
            Creates a new instance of the Xor32Bit class.
            The checksum starts off with a value of 0.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Xor32.Value">
      <summary>
            Returns the Xor 32-bit checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor32.Reset">
      <summary>
            Resets the checksum to the initial value.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor32.Update(System.UInt32)">
      <summary>
            Updates the checksum with a uint value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor32.Update(System.Byte[])">
      <summary>
            Updates the checksum with an array of bytes.
            </summary>
      <param name="buffer">
            The source of the data to update with.
            </param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor32.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">
            an array of bytes
            </param>
      <param name="offset">
            the start of the data used for this update
            </param>
      <param name="count">
            the number of bytes to use for this update
            </param>
    </member>
    <member name="T:Gemstone.IO.Checksums.Xor64">
      <summary>Calculates quad-word length (64-bit) XOR-based check-sum on specified portion of a buffer.</summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor64.#ctor">
      <summary>
            Creates a new instance of the Xor64Bit class.
            The checksum starts off with a value of 0.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Xor64.Value">
      <summary>
            Returns the Xor 64-bit checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor64.Reset">
      <summary>
            Resets the checksum to the initial value.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor64.Update(System.UInt64)">
      <summary>
            Updates the checksum with a ulong value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor64.Update(System.Byte[])">
      <summary>
            Updates the checksum with an array of bytes.
            </summary>
      <param name="buffer">
            The source of the data to update with.
            </param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor64.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">
            an array of bytes
            </param>
      <param name="offset">
            the start of the data used for this update
            </param>
      <param name="count">
            the number of bytes to use for this update
            </param>
    </member>
    <member name="T:Gemstone.IO.Checksums.Xor8">
      <summary>Calculates byte length (8-bit) XOR-based check-sum on specified portion of a buffer.</summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor8.#ctor">
      <summary>
            Creates a new instance of the Xor8Bit class.
            The checksum starts off with a value of 0.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Checksums.Xor8.Value">
      <summary>
            Returns the Xor 8-bit checksum computed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor8.Reset">
      <summary>
            Resets the checksum to the initial value.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor8.Update(System.Byte)">
      <summary>
            Updates the checksum with a byte value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to use for the update.</param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor8.Update(System.Byte[])">
      <summary>
            Updates the checksum with an array of bytes.
            </summary>
      <param name="buffer">
            The source of the data to update with.
            </param>
    </member>
    <member name="M:Gemstone.IO.Checksums.Xor8.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">
            an array of bytes
            </param>
      <param name="offset">
            the start of the data used for this update
            </param>
      <param name="count">
            the number of bytes to use for this update
            </param>
    </member>
    <member name="T:Gemstone.IO.Collections.FileBackedDictionary`2">
      <summary>
            Represents a lookup table of key/value pairs backed by a file, with very little memory overhead.
            </summary>
      <typeparam name="TKey">The type of the keys in the lookup table.</typeparam>
      <typeparam name="TValue">The type of the values in the lookup table.</typeparam>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="TKey" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="TKey" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="dictionary">The dictionary whose elements are copied to this dictionary.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="TKey" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="keyComparer">The equality comparer used to compare keys in the dictionary.</param>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.String,System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="dictionary">The dictionary whose elements are copied to this dictionary.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null or <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="TKey" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.String,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="keyComparer">The equality comparer used to compare keys in the dictionary.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="dictionary">The dictionary whose elements are copied to this dictionary.</param>
      <param name="keyComparer">The equality comparer used to compare keys in the dictionary.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.#ctor(System.String,System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="dictionary">The dictionary whose elements are copied to this dictionary.</param>
      <param name="keyComparer">The equality comparer used to compare keys in the dictionary.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null or <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.FilePath">
      <summary>
            Gets or sets the path to the file backing this dictionary.
            </summary>
      <exception cref="T:System.ArgumentException">FilePath is set and is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <remarks>
            Changes to this property will cause the file to close if the file is already opened.
            Data will not be automatically written from the old file to the new file.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.
            </summary>
      <returns>
            true if the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.DefaultSignature">
      <summary>
            Gets the default signature used by the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />
            if no user-defined signature is supplied.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.Signature">
      <summary>
            Gets or sets the signature of the file backing the lookup table.
            </summary>
      <exception cref="T:System.ArgumentNullException">Attempt is made to set Signature to a null value.</exception>
      <exception cref="T:System.ArgumentException">Attempt is made to set Signature to a value larger than the maximum allowed size.</exception>
      <exception cref="T:System.NotSupportedException">Attempt is made to modify Signature of a read-only lookup table.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.Item(`0)">
      <summary>
            Gets or sets the element with the specified key.
            </summary>
      <returns>
            The element with the specified key.
            </returns>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.Keys">
      <summary>
            Gets an <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> containing the keys of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <returns>
            An <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> containing the keys of the object that implements <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.Values">
      <summary>
            Gets an <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> containing the values in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <returns>
            An <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> containing the values in the object that implements <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.CacheSize">
      <summary>
            Gets or sets the size of the cache used
            to store data from the file in memory.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedDictionary`2.FragmentationCount">
      <summary>
            Gets the number of operations that fragment the
            lookup table that have occurred since the last
            time the lookup table was compacted.
            </summary>
      <remarks>
            This value is not stored in the file and may therefore
            be inaccurate if the lookup table has not been compacted
            since the last time it was opened.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Open">
      <summary>
            Opens the file backing this dictionary.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.OpenRead">
      <summary>
            Opens the file backing this hash set in read-only mode.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Add(`0,`1)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Adds an item to the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Remove(`0)">
      <summary>
            Removes the element with the specified key from the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <returns>
            true if the element is successfully removed; otherwise, false.
            This method also returns false if <paramref name="key" /> was not
            found in the original <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />;
            otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </returns>
      <param name="item">The object to remove from the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.ContainsKey(`0)">
      <summary>
            Determines whether the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> contains an element with the specified key.
            </summary>
      <returns>
            true if the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
      <param name="key">The key to locate in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Determines whether the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.</param>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <returns>
            true if the object that implements <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Clear">
      <summary>
            Removes all items from the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is read-only. </exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.GetKeys">
      <summary>
            Gets an enumerable used to iterate only the keys in the dictionary.
            </summary>
      <returns>An enumerable used to iterate only the keys in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.GetValues">
      <summary>
            Gets an enumerable used to iterate only the values in the dictionary.
            </summary>
      <returns>An enumerable used to iterate only the values in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Compact">
      <summary>
            Defragments the item section of the dictionary,
            which gets fragmented after removing keys or updating values.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Close">
      <summary>
            Closes the file backing this dictionary.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.Collections.FileBackedDictionary`2" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Gemstone.IO.Collections.FileBackedHashSet`1">
      <summary>
            Represents a lookup table backed by a file, with very little memory overhead.
            </summary>
      <typeparam name="T">The type of the items in the lookup table.</typeparam>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="T" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="T" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="comparer">The equality comparer used to compare items in the hash set.</param>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="enumerable">The enumerable whose elements are copied to this hash set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumerable" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="T" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.String,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="comparer">The equality comparer used to compare items in the hash set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="enumerable">The enumerable whose elements are copied to this hash set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null or <paramref name="enumerable" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
      <remarks>
            This constructor uses the default equality comparer for file backed lookup tables,
            which is not the same as the default equality comparer for <typeparamref name="T" />
            objects. This is because the default implementation of <see cref="M:System.Object.GetHashCode" />
            does not provide guarantees about consistency across platforms, or even implementations
            of the CLR. Instead, the default equality comparer uses a byte-for-byte comparison to
            determine equality between keys and a CRC-32 for its hash code implementation. This
            means the performance of the hashing function is dependent on the performance of the
            serialization function.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="enumerable">The enumerable whose elements are copied to this hash set.</param>
      <param name="comparer">The equality comparer used to compare items in the hash set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumerable" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> class.
            </summary>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="enumerable">The enumerable whose elements are copied to this hash set.</param>
      <param name="comparer">The equality comparer used to compare items in the hash set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null or <paramref name="enumerable" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="T" /> cannot be serialized.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.FilePath">
      <summary>
            Gets or sets the path to the file backing this hash set.
            </summary>
      <exception cref="T:System.ArgumentException">FilePath is set and is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <remarks>
            Changes to this property will cause the file to close if the file is already opened.
            Data will not be automatically written from the old file to the new file.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.
            </summary>
      <returns>
            true if the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.DefaultSignature">
      <summary>
            Gets the default signature used by the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />
            if no user-defined signature is supplied.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.Signature">
      <summary>
            Gets or sets the signature of the file backing the lookup table.
            </summary>
      <exception cref="T:System.ArgumentNullException">Attempt is made to set Signature to a null value.</exception>
      <exception cref="T:System.ArgumentException">Attempt is made to set Signature to a value larger than the maximum allowed size.</exception>
      <exception cref="T:System.NotSupportedException">Attempt is made to modify Signature of a read-only lookup table.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.CacheSize">
      <summary>
            Gets or sets the size of the cache used
            to store data from the file in memory.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedHashSet`1.FragmentationCount">
      <summary>
            Gets the number of operations that fragment the
            lookup table that have occurred since the last
            time the lookup table was compacted.
            </summary>
      <remarks>
            This value is not stored in the file and may therefore
            be inaccurate if the lookup table has not been compacted
            since the last time it was opened.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Open">
      <summary>
            Opens the file backing this hash set.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.OpenRead">
      <summary>
            Opens the file backing this hash set in read-only mode.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Add(`0)">
      <summary>
            Adds an element to the current set and returns a value to indicate if the element was successfully added. 
            </summary>
      <param name="item">The element to add to the set.</param>
      <returns>
            true if the element is added to the set; false if the element is already in the set.
            </returns>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
            Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> collection.
            </summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <returns>The number of elements that were removed from the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> collection.</returns>
      <exception cref="T:System.ArgumentNullException">match is null</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Modifies the current set so that it contains only elements that are present
            either in the current set or in the specified collection, but not both. 
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
            true if the current set is a subset of <paramref name="other" />; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
            true if the current set is a superset of <paramref name="other" />; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
      <param name="other">The collection to compare to the current set. </param>
      <returns>
            true if the current set is a proper superset of <paramref name="other" />; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
            true if the current set is a proper subset of <paramref name="other" />; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
            true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Determines whether the current set and the specified collection contain the same elements.
            </summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
            true if the current set is equal to <paramref name="other" />; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Clear">
      <summary>
            Removes all items from the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Compact">
      <summary>
            Defragments the item section of the hash set,
            which gets fragmented after removing items.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Close">
      <summary>
            Closes the file backing this hash set.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
            Adds an item to the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedHashSet`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:Gemstone.IO.Collections.LookupTableType.Dictionary">
      <summary>
            Dictionary with keys and values in the item nodes.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Collections.LookupTableType.HashSet">
      <summary>
            HashSet with lookup node markers for set operations.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Collections.FileBackedLookupTable`2.DictionarySignature">
      <summary>
            Defines signature for dictionaries.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Collections.FileBackedLookupTable`2.HashSetSignature">
      <summary>
            Defines signature for hash sets.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.#ctor(Gemstone.IO.Collections.LookupTableType)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> class.
            </summary>
      <param name="lookupTableType">Type of the lookup table used to tweak the file format.</param>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.#ctor(Gemstone.IO.Collections.LookupTableType,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> class.
            </summary>
      <param name="lookupTableType">Type of the lookup table used to tweak the file format.</param>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.#ctor(Gemstone.IO.Collections.LookupTableType,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> class.
            </summary>
      <param name="lookupTableType">Type of the lookup table used to tweak the file format.</param>
      <param name="keyComparer">The equality comparer used to compare keys in the lookup table.</param>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.#ctor(Gemstone.IO.Collections.LookupTableType,System.String,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> class.
            </summary>
      <param name="lookupTableType">Type of the lookup table used to tweak the file format.</param>
      <param name="filePath">The path to the file used to store the lookup table.</param>
      <param name="keyComparer">The equality comparer used to compare keys in the lookup table.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Either <typeparamref name="TKey" /> or <typeparamref name="TValue" /> cannot be serialized.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.FilePath">
      <summary>
            Gets or sets the path to the file backing this lookup table.
            </summary>
      <exception cref="T:System.ArgumentException">FilePath contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <remarks>
            Changes to this property will cause the file to close if the file is already opened.
            Data will not be automatically written from the old file to the new file.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.
            </summary>
      <returns>
            true if the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.Signature">
      <summary>
            Gets or sets the signature of the file backing the lookup table.
            </summary>
      <exception cref="T:System.ArgumentNullException">Attempt is made to set Signature to a null value.</exception>
      <exception cref="T:System.ArgumentException">Attempt is made to set Signature to a value larger than the maximum allowed size.</exception>
      <exception cref="T:System.NotSupportedException">Attempt is made to modify Signature of a read-only lookup table.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.Item(`0)">
      <summary>
            Gets or sets the element with the specified key.
            </summary>
      <returns>
            The element with the specified key.
            </returns>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.CacheSize">
      <summary>
            Gets or sets the size of the cache used
            to store data from the file in memory.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.FileBackedLookupTable`2.FragmentationCount">
      <summary>
            Gets the number of operations that fragment the
            lookup table that have occurred since the last
            time the lookup table was compacted.
            </summary>
      <remarks>
            This value is not stored in the file and may therefore
            be inaccurate if the lookup table has not been compacted
            since the last time it was opened.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Open">
      <summary>
            Opens the file backing this lookup table.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.OpenRead">
      <summary>
            Opens the file backing this lookup table in read-only mode.
            </summary>
      <exception cref="T:System.InvalidOperationException">File is already open or the file has a pending transaction that could not be completed.</exception>
      <exception cref="T:System.FormatException">The format of the file is invalid.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Add(`0,`1)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.TryAdd(`0,`1)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <returns>True if the item was successfully added; false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Remove(`0)">
      <summary>
            Removes the element with the specified key from the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </summary>
      <returns>
            true if the element is successfully removed; otherwise, false.
            This method also returns false if <paramref name="key" /> was not
            found in the original <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.TryMark(`0)">
      <summary>
            Attempts to find the lookup node for the corresponding
            key and, if found, marks the lookup node.
            </summary>
      <param name="key">The key used to find the lookup node to be marked.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.AllMarked">
      <summary>
            Determines whether all occupied lookup nodes are marked.
            </summary>
      <returns>True if all occupied lookup nodes are marked; false otherwise.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.RemoveMarked">
      <summary>
            Removes all unmarked nodes from the hash set.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.RemoveUnmarked">
      <summary>
            Removes all unmarked nodes from the hash set.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.UnmarkAll">
      <summary>
            Unmarks all lookup nodes in the hash set.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.ContainsKey(`0)">
      <summary>
            Determines whether the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> contains an element with the specified key.
            </summary>
      <returns>
            true if the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> contains an element with the key; otherwise, false.
            </returns>
      <param name="key">The key to locate in the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.TryGetValue(`0,`1@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <returns>
            true if the object that implements <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Clear">
      <summary>
            Removes all items from the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> is read-only. </exception>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.GetKeys">
      <summary>
            Gets an enumerable used to iterate only the keys in the lookup table.
            </summary>
      <returns>An enumerable used to iterate only the keys in the lookup table.</returns>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Compact">
      <summary>
            Defragments the item section of the lookup table,
            which gets fragmented after removing keys or updating values.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Close">
      <summary>
            Closes the file backing this lookup table.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.Collections.FileBackedLookupTable`2" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.FileBackedLookupTable`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Gemstone.IO.Collections.RollingWindow`1">
      <summary>
            Represents a rolling window of data with FIFO semantics that will
            automatically truncate the data when the window size is exceeded.
            </summary>
      <typeparam name="T">The type of objects to be stored in the rolling window.</typeparam>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> class.
            </summary>
      <param name="windowSize">The size of the window maintained by the collection.</param>
    </member>
    <member name="P:Gemstone.IO.Collections.RollingWindow`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.RollingWindow`1.WindowSize">
      <summary>
            Gets the size of the window maintained by the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.RollingWindow`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> is read-only.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Collections.RollingWindow`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <returns>
            The element at the specified index.
            </returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</param>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">Rolling window is full (<see cref="P:Gemstone.IO.Collections.RollingWindow`1.Count" /> = <see cref="P:Gemstone.IO.Collections.RollingWindow`1.WindowSize" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />; otherwise, false.
            This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</param>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.</param>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.Clear">
      <summary>
            Removes all items from the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Gemstone.IO.Collections.RollingWindow`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Gemstone.IO.Collections.RollingWindow`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Gemstone.IO.Collections.RollingWindow`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Gemstone.IO.InterprocessCache">
      <summary>
            Represents a serialized data cache that can be saved or read from multiple applications using inter-process synchronization.
            </summary>
      <remarks>
            Note that all file data in this class gets serialized to and from memory, as such, the design intention for this class is for
            use with smaller data sets such as serialized lists or dictionaries that need inter-process synchronized loading and saving.
            </remarks>
    </member>
    <member name="F:Gemstone.IO.InterprocessCache.DefaultMaximumRetryAttempts">
      <summary>
            Default maximum retry attempts allowed for loading <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="F:Gemstone.IO.InterprocessCache.DefaultRetryDelayInterval">
      <summary>
            Default wait interval, in milliseconds, before retrying load of <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.InterprocessCache" /> with the specified number of <paramref name="maximumConcurrentLocks" />.
            </summary>
      <param name="maximumConcurrentLocks">Maximum concurrent reader locks to allow.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.IO.InterprocessCache" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.FileName">
      <summary>
            Path and file name for the cache needing inter-process synchronization.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.FileData">
      <summary>
            Gets or sets file data for the cache to be saved or that has been loaded.
            </summary>
      <remarks>
            Setting value to <c>null</c> will create a zero-length file.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.AutoSave">
      <summary>
            Gets or sets flag that determines if <see cref="T:Gemstone.IO.InterprocessCache" /> should automatically initiate a save when <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> has been updated.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.ReloadOnChange">
      <summary>
            Gets or sets flag that enables system to monitor for changes in <see cref="P:Gemstone.IO.InterprocessCache.FileName" /> and automatically reload <see cref="P:Gemstone.IO.InterprocessCache.FileData" />.
            </summary>
      <remarks>
            Use extreme caution when enabling this property - it will be critical to dispose of this class when this property is set to true
            since it will create a file watcher that attaches to an event referenced by this class using pinned memory, as a result, this class
            will not get garbage collected until this class is disposed thus detaching the associated event.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.MaximumConcurrentLocks">
      <summary>
            Gets the maximum concurrent reader locks allowed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts">
      <summary>
            Maximum retry attempts allowed for loading or saving cache file data.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.RetryDelayInterval">
      <summary>
            Wait interval, in milliseconds, before retrying load or save of cache file data.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.InterprocessCache" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.InterprocessCache" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Save">
      <summary>
            Initiates inter-process synchronized cache file save.
            </summary>
      <remarks>
            Subclasses should always call <see cref="M:Gemstone.IO.InterprocessCache.WaitForLoad" /> before calling this method.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Load">
      <summary>
            Initiates inter-process synchronized cache file load.
            </summary>
      <remarks>
            Subclasses should always call <see cref="M:Gemstone.IO.InterprocessCache.WaitForLoad" /> before calling this method.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForLoad">
      <summary>
            Blocks current thread and waits for any pending load to complete; wait time is <c><see cref="P:Gemstone.IO.InterprocessCache.RetryDelayInterval" /> * <see cref="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts" /></c>.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForLoad(System.Int32)">
      <summary>
            Blocks current thread and waits for specified <paramref name="millisecondsTimeout" /> for any pending load to complete.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForSave">
      <summary>
            Blocks current thread and waits for any pending save to complete; wait time is <c><see cref="P:Gemstone.IO.InterprocessCache.RetryDelayInterval" /> * <see cref="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts" /></c>.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForSave(System.Int32)">
      <summary>
            Blocks current thread and waits for specified <paramref name="millisecondsTimeout" /> for any pending save to complete.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.SaveFileData(System.IO.FileStream,System.Byte[])">
      <summary>
            Handles serialization of file to disk; virtual method allows customization (e.g., pre-save encryption and/or data merge).
            </summary>
      <param name="fileStream">
        <see cref="T:System.IO.FileStream" /> used to serialize data.</param>
      <param name="fileData">File data to be serialized.</param>
      <remarks>
            Consumers overriding this method should not directly call <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> property to avoid potential dead-locks.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.LoadFileData(System.IO.FileStream)">
      <summary>
            Handles deserialization of file from disk; virtual method allows customization (e.g., pre-load decryption and/or data merge).
            </summary>
      <param name="fileStream">
        <see cref="T:System.IO.FileStream" /> used to deserialize data.</param>
      <returns>Deserialized file data.</returns>
      <remarks>
            Consumers overriding this method should not directly call <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> property to avoid potential dead-locks.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.SynchronizedWrite">
      <summary>
            Synchronously writes file data when no reads are active.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.SynchronizedRead">
      <summary>
            Synchronously reads file data when no writes are active.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.RetrySynchronizedEvent(System.Exception,System.Int32)">
      <summary>
            Initiates a retry for specified event type.
            </summary>
      <param name="ex">Exception causing retry.</param>
      <param name="eventType">Event type to retry.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.m_retryTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
      <summary>
            Retries specified serialize or deserialize event in case of file I/O failures.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.m_fileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
            Reload file upon external modification.
            </summary>
      <param name="sender">The object that triggered the event.</param>
      <param name="e">An object which provides data for directory events.</param>
    </member>
    <member name="N:Gemstone.IO">
      <summary>
            The <see cref="N:Gemstone.IO" /> namespace organizes all Gemstone library functionality
            related to Input and Output (IO). The root namespace also includes common IO related classes,
            e.g., <see cref="T:Gemstone.IO.SafeFileWatcher" />.
            </summary>
    </member>
    <member name="T:Gemstone.IO.SafeFileWatcher">
      <summary>
            Represents a wrapper around the native .NET <see cref="T:System.IO.FileSystemWatcher" /> that avoids problems with
            dangling references when using a file watcher instance as a class member that never gets disposed.
            </summary>
      <remarks>
        <para>
            The design goal of the SafeFileWatcher is to avoid accidental memory leaks caused by use of .NET's native
            file system watcher when used as a member of a class that consumers fail to properly dispose. If a class
            has a reference to a file watcher as a member variable and attaches to the file watcher's events, the
            file watcher will maintain a reference the parent class so it can call its event handler. If the parent
            class is not disposed properly, the file watcher will thusly not be disposed and will maintain the
            reference to the parent class - the garbage collector will never collect the parent because it has a
            valid reference and no collection means the parent finalizer will never get called and the file system
            watcher will never get disposed. Creating multiple instances of parent class and not disposing of them
            will cause a memory leak even with a properly designed disposable pattern. Using the SafeFileWatcher
            instead of directly using the FileSystemWatcher will resolve this potential issue.
            </para>
        <para>
            Note that component model implementation is not fully replicated - if you are using a file system watcher
            on a design surface, this safety wrapper will usually not be needed. This class has benefit when a class
            will dynamically use a file watcher and needs to make sure any unmanaged resources get properly released
            even if a consumer neglects to call the dispose function.
            </para>
      </remarks>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Changed">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is changed.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Created">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is created.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Deleted">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is deleted.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Renamed">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is renamed.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Error">
      <summary>
            Occurs when the internal buffer overflows.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class, given the specified directory to monitor.
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
            </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="path" /> parameter is an empty string (""). -or-
            The path specified through the <paramref name="path" /> parameter does not exist.
            </exception>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class, given the specified directory and type of files to monitor.
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="path" /> parameter is null. -or-
            The <paramref name="filter" /> parameter is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="path" /> parameter is an empty string (""). -or-
            The path specified through the <paramref name="path" /> parameter does not exist.
            </exception>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Finalize">
      <summary>
            Terminates <see cref="T:Gemstone.IO.SafeFileWatcher" /> instance making sure to release unmanaged resources.
            </summary>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Path">
      <summary>
            Gets or sets the path of the directory to watch.
            </summary>
      <returns>
            The path to monitor. The default is an empty string ("").
            </returns>
      <exception cref="T:System.ArgumentException">
            The specified path does not exist or could not be found. -or-
            The specified path contains wildcard characters. -or-
            The specified path contains invalid path characters.
            </exception>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Filter">
      <summary>
            Gets or sets the filter string used to determine what files are monitored in a directory.
            </summary>
      <returns>
            The filter string. The default is "*.*" (Watches all files.) 
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.NotifyFilter">
      <summary>
            Gets or sets the type of changes to watch for.
            </summary>
      <returns>
            One of the <see cref="T:System.IO.NotifyFilters" /> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.EnableRaisingEvents">
      <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
      <returns>
            true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> has not been set or is invalid.</exception>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.IncludeSubdirectories">
      <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
      <returns>
            true if you want to monitor subdirectories; otherwise, false. The default is false.
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.InternalBufferSize">
      <summary>
            Gets or sets the size of the internal buffer.
            </summary>
      <returns>
            The internal buffer size. The default is 8192 (8K).
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.SynchronizingObject">
      <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.
            </summary>
      <returns>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Site">
      <summary>
            Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:Gemstone.IO.SafeFileWatcher" />.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:Gemstone.IO.SafeFileWatcher" />.
            </returns>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.SafeFileWatcher" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.SafeFileWatcher" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>
            A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.
            </summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>
            A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.
            </summary>
      <returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
      <param name="timeout">The time (in milliseconds) to wait before timing out.</param>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.BeginInit">
      <summary>
            Begins the initialization of a <see cref="T:Gemstone.IO.SafeFileWatcher" /> used on a form or used by another component. The initialization occurs at run time.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.EndInit">
      <summary>
            Ends the initialization of a <see cref="T:Gemstone.IO.SafeFileWatcher" /> used on a form or used by another component. The initialization occurs at run time.
            </summary>
    </member>
    <member name="N:Gemstone.IO.Checksums.ChecksumExtensions">
      <summary />
    </member>
    <member name="N:Gemstone.IO.Collections">
      <summary />
    </member>
  </members>
</doc>